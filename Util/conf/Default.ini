#
#   !!! DO NOT MODIFY THIS FILE !!!
#
# It will be overwritten every version update. Place confing files in the userconf folder instead.
#



[NewsHost]
# The address of your newshost you want to upload to
Address=Address of news host

# The port of your newshost you want to upload to usually 80 or 119 for non ssl and 443 or 563 for SSL
Port=443

# Credentials to use for uploading
Username=username
Password=password

# Use ssl or not. Take into account that forcing ssl on non SSL connections wont work, and vice versa
UseSSL=yes

# How many connections to open simultaneously. Your newshost. More is not always better. 
# Experiment with this to find the lowest value that saturates your connection for best performance.
MaxConnectionCount=10


[Indexer]
# enter your API key that is used for the indexer here. Then you can use ${ApiKey} in the urls below
ApiKey=APIKEY

# Method used to notify the index of the new upload.
# Supported values are 'NewznabHash' which uses the newznab Method (default)
# or 'NzbPost' which sends the nzb file to the notification url.
#
# when using NzbPost you can set extra parameters for the file name field on the form as any extra form parameters that need to be submitted.
# see NzbPostFilenameParam and NzbPostExtraParams below.
NotificationType=NewznabHash

# How many times a notification attempt is performed.
# After this number of tries the upload moves to postfailed 
# as there is probably something wrong with the name which causes rejection by the indexer.
MaxNotificationAttempts=20

# API url that is used to notify the indexer of an obfuscated release.
# The following two parameters will be replaced:
#   {0} by the obfuscated name of the file/folder
#   {1} by the original name of the file/folder
#   optionally ${ApiKey} will be replaced by the value entered above
ObfuscatedNotificationUrl=https://api.apiserver.com/api?hash={0}&name={1}&apikey=${ApiKey}

# The name of the parameter on the POST form that should contain the nzb file contents.
NzbPostFilenameParam=file

# extra key/value pairs that need to be posted to the server as well.
# separate each pair with an & and use key=value format for the definition of each pair.
# for example: NzbPostExtraParams="apikey=test&param2=value"
NzbPostExtraParams=""

# Method used to verify that the upload was placed on the index.
# Supported values are 'NewznabSearch' which uses the newznab method (default)
# 'PostVerify' which uses a custom post verification method.
# or 'Dummy' which always considers an upload as successful and therefore cleans up the backup folder after VerifierIntervalMinutes
VerificationType=NewznabSearch

# API url that is used to search the indexer.
# The following two parameters will be replaced:
#   {0} by the search query
#   {1} by the age + 1 of the post in days
#   optionally ${ApiKey} will be replaced by the value entered above
SearchUrl=https://api.apiserver.com/api?t=search&q={0}&maxage={1}&apikey=${ApiKey}

# The indexer rename maps defines rules how the indexer itself renames uploaded items. Use this if verification fails because of too much difference between what was uploaded and what was found.-->
# This map works as follows. Each character in Source is replaced by the corresponding character in target. If the character in target is identical it is removed entirely -->
# because whitespace is often used here place the value between quotes
IndexerRenameMapSource="_@"
IndexerRenameMapTarget=" @"

# Some indexers still rename some things.
# This parameters determines how similar the uploaded name has to be using the Levenshtein distance.
# The default value of 95 is a good compromise in most cases.
VerifySimilarityPercentageTreshold=95


[Folders]
# Folder used to prepare the files for posting. Any data in this folder is removed at startup!
Working=working

# What folder to use as queue for files that have not been uploaded yet.
Queue=queue

# What folder to use as backup for the files that have not been verified yet.
Backup=backup

# The folder to put failed uploads in
UploadFailed=uploadfailed

# Folder where to output NZB's leave empty to skip writing NZB's to the filesystem
NzbOutput=

# Do not delete the subfolder in the working folder when an error occurs.
# This is mainly useful to debug errors with external programs, leave on false to prevent unnecceseary use of disk space.
KeepProcessingFolderAfterError=false


[Posting]
# The maximum number of attempts a file will be reposted if it has an error. After this it goes to the postFailed folder
MaxRepostCount=3

# When a release has been found on the indexer, remove it from the backup location or not.
# It is best to leave this on unless you have a manual cleaning process.
RemoveAfterVerify=yes

# This list contains the rar and par2 settings depending on filesize add more entries for finer control
# Each entry contains the following 3 fields: "From size in megabytes,Rar size in megabyte,Par percentage" Separate each series by a |
# so "0,15,10" would mean: for files from 0 megabyes use a 15 megabyte par size and 10 percent par2.
RarNParSettings=0,15,10|1024,50,10|5120,100,5


[External Programs]
# How many minutes to wait on new output from an external process. 
# If you are on a slow system (Atom for instance) you might want to increase this value.
InactiveProcessTimeoutMinutes=5

# Where to find rar on the system, leave empty if rar is accesible trough the path
RarLocation=

# Extra parameters to add to the end of the rar command, careful with this as it can break stuff.
RarExtraParameters=

# Where to find par2 on the system, leave empty if par2 is accesible trough the path
ParLocation=

# Extra parameters to add to the end of the par command, careful with this as it can break stuff.
ParExtraParameters=

# Format string of the par command parameters.
# Modifying this without knowing what you're doing WILL break stuff.
# Only use this if your par2 command uses different parameter names/ordering compared to the basic par2 commandline.
# Use \" if you need a quote within the command.
#
# List of parameters that are replaced:
# {0} : The block size of the file in bytes
# {1} : Redundancy percentage as a number, no suffix like % is added here, so if your command requires it add it like this: {1}%
# {2} : The output par2 name, this has a high probability of containing spaces so it is wrapped in double quotes. You do not have to add these yourself.
# {3} : The input filelist, this is a list of all input files, starting with a space and a space in between each file: "file1.rar" "file2.rar" etc.. The files are already surrounded in double quotes.
# {4} : The ParExtraParameters as defined in the config. If wanted that setting can be left empty (default) and custom parameters can be placed here at a more precise location.
#
# These parameters are always passed, and they have to be present in the command. You can use a parameter multiple times. But it has to appear at least once.
# If your par2 executable cannot deal with a parameter find a way to "nullify" by placing it in a comment section or something like that.
ParCommandFormat="c -s{0} -r{1} {4} -- {2}{3}"

# Where to find mkvpropedit on the system, leave empty if mkvpropedit is accesible trough the path
MkvPropEditLocation=

# Where to find ffmpeg on the system, leave empty if ffmpeg is accesible trough the path
FFmpegLocation=


[Subjob Timings]
# How often to check for new files in the watch folder.
FilesystemCheckIntervalSeconds=5

# Minimum age in minutes that files/folders need to have before they get picked up.
FilesystemCheckTesholdMinutes=5

# How often to trigger the posting thread.
AutoposterIntervalSeconds=5

# How often to notify the index of new obfuscated content.
NotifierIntervalMinutes=5

# How often to verify content has been indexed.
VerifierIntervalMinutes=15

# After how many minutes should we verify the upload. 
# Set this to the typical index time of the indexer to limit search API spam. 
# But low enough to speed backup cleaning
VerifyAfterMinutes=20

# After how many minutes should we trigger a reupload.
# Make this higher if you are seeing duplicate uploads.
RepostAfterMinutes=240

# after how many hours should we trigger a database cleanup
DatabaseCleanupHours=24

# How many days of entries to keep in the database
DatabaseCleanupKeepdays=30


[Nntp]
# How many times to retry posting a message. Take into account this is a usenet message, not a file.
MaxRetryCount=3

# How many seconds to wait in between message retries
RetryDelaySeconds=15

# how many seconds to wait before a reply on the underlying TCP channel
NntpConnectionTimeoutSeconds=60

# How long the yEnc lines should be. ONLY CHANGE IF YOU KNOW WHAT YOU'RE DOING!
YEncLineSize=128

# How many yEnc lines to put in a post. ONLY CHANGE IF YOU KNOW WHAT YOU'RE DOING!
YEncLinesPerMessage=6000
